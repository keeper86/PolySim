name: Website CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    checks:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '24'
            - name: Cache npm
              uses: actions/cache@v4
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-npm-cache-
            - name: Install dependencies
              run: npm ci
            - name: Check formatting
              run: npm run format:check
            - name: Lint
              run: npm run lint:check
            - name: Run unit tests
              run: npm run test

    e2e:
        runs-on: ubuntu-latest
        container:
            image: mcr.microsoft.com/playwright:v1.55.0-noble
            options: --user 1001
        needs: checks
        if: (github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main')
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '24'
            - name: Cache npm
              uses: actions/cache@v4
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-npm-cache-
            - name: Cache Playwright browsers
              uses: actions/cache@v4
              with:
                  path: ~/.cache/ms-playwright
                  key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-playwright-
            - name: Install dependencies
              run: npm ci
            - name: Add polysim hostnames to /etc/hosts (idempotent, from .env.development)
              run: |
                  set -a
                  source .env.development
                  set +a
                  HOST_IP="${DEV_ONLY_DOCKER_HOST_IP:-127.0.0.1}"
                  DOMAIN="${DEV_DOMAIN}"
                  KC_DOMAIN="${KEYCLOAK_DOMAIN}"
                  HOSTS_LINE="$HOST_IP $DOMAIN $KC_DOMAIN"
                  # Only add if not already present
                  if ! grep -q "$DOMAIN" /etc/hosts; then
                    echo "$HOSTS_LINE" | sudo tee -a /etc/hosts
                  else
                    echo "/etc/hosts already contains $HOSTS_LINE, skipping."
                  fi
            - name: Generate self-signed certificates (overwrite, idempotent, from .env.development)
              run: |
                  set -a
                  source .env.development
                  set +a
                  mkdir -p certs
                  rm -f certs/polysim.key certs/polysim.crt
                  DOMAIN="${DEV_DOMAIN}"
                  openssl req -x509 -newkey rsa:2048 -nodes -keyout certs/polysim.key -out certs/polysim.crt -days 1 \
                    -subj "/CN=$DOMAIN"
            - name: Start services with Docker Compose
              run: |
                  docker compose -f docker-compose.development.yaml --env-file .env.development up --build -d
            - name: Wait for app to be ready
              run: |
                  set -a
                  source .env.development
                  set +a
                  npx wait-on --timeout=60000 https://${DEV_DOMAIN}/api/health
            - name: Print container logs on failure
              if: failure()
              run: docker compose -f docker-compose.development.yaml --env-file .env.development logs && printenv
            - name: Run Playwright tests
              run: |
                  npx playwright install --with-deps
                  npm run test:e2e
            - name: Stop all containers
              if: always()
              run: docker compose -f docker-compose.development.yaml --env-file .env.development down
