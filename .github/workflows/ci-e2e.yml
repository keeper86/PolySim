name: CI Build and E2E

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: Dockerfile
                  push: true
                  tags: ghcr.io/${{ github.repository_owner }}/polysim/app:${{ github.sha }}
                  # Use multi-stage build in Dockerfile for minimal image

    e2e:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Start services with Docker Compose
              run: |
                  docker compose -f docker-compose.development.yaml --env-file .env.development up -d

            - name: Set NEXTAUTH_URL env
              run: echo "NEXTAUTH_URL=https://polysim" >> $GITHUB_ENV

            - name: Wait for app to be ready
              run: npx wait-on https://polysim/api/health

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '24'

            - name: Install dependencies
              run: npm ci

            - name: Run Playwright tests
              run: |
                  npx playwright install --with-deps
                  npm run test:e2e

            - name: Stop all containers
              if: always()
              run: docker compose -f docker-compose.development.yaml down
